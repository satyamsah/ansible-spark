---
 - hosts: mylocalhost
   become: true
   tasks:

     - name: check if git is installed
       stat: path=/usr/bin/git
       register: git_exists

     - name: Install git
       become_user: root
       apt: name=git state=latest
       when: git_exists.stat.exists == False

     - name: Check that the somefile.conf exists
       stat: path=/home/{{ lookup('env','USER') }}/.ssh/id_rsa.pub
       register: ssh_exists

     - name: Generates SSH keys if they do not exist
       become_user: root
       shell: ssh-keygen -b 2048 -t rsa -f /home/{{ lookup('env','USER') }}/.ssh/id_rsa -q -N ""
       args:
         creates: /home/{{ lookup('env','USER') }}/.ssh/id_rsa
       when: ssh_exists.stat.exists == False

     - name: install pip
       become_user: root
       apt: name=python-pip state=latest

     - name: upgrade pip
       become_user: root
       command: pip install --upgrade pip

     - name: install dependency for cloudmesh_client
       become_user: root
       apt: name={{item}} state=latest
       with_items:
         - build-essential
         - libffi-dev
         - libssl-dev
         - python-dev

     - name: install virtual env
       become_user: root
       pip: name=virtualenv state=present

     - name: github first time sync
       become_user: "{{ lookup('env','USER') }}"
       shell: |
          git config --global user.name "username"
          git config --global user.email "emailid"

     - name: install venvwrapper
       become_user: root
       pip: name=virtualenvwrapper state=latest

     - name: install cryptography
       become_user: root
       pip: name=cryptography

     - name: python dependencies for cloudmesh
       become_user: root
       action: pip name={{item}} state=present
       with_items:
         - httplib2

     - name: Check that the somefile.conf exists
       stat: path=/home/{{ lookup('env','USER') }}/.cloudmesh/
       register: cloudmesh_exists

     - name: Check that if cm is installed
       stat: path=/usr/local/bin/cm
       register: cloudmesh_installed

     - name: fresh install
       pip: name=cloudmesh_client state=latest
       when: cloudmesh_installed.stat.exists == false

     - name: reset cloudmesh db before re-install
       become_user: "{{ lookup('env','USER') }}"
       shell:
         cm reset
       when: cloudmesh_installed.stat.exists == true

     - name: uninstall cloudmesh_client
       pip: name=cloudmesh_client state=absent
       when: cloudmesh_installed.stat.exists == true

     - name: re-install
       pip: name=cloudmesh_client state=latest
       when: cloudmesh_installed.stat.exists == true

     - name: refresh
       become_user: "{{ lookup('env','USER') }}" 
       shell: |
         cm refresh on

     - name: Preparing cloudmesh-set cloud as cloudmesh
       become_user: "{{ lookup('env','USER') }}"
       shell: cm default cloud=chameleon

     - name: Preparing cloudmesh- registering the profile
       become_user: "{{ lookup('env','USER') }}"
       shell: cm register profile

     - name: Preparing cloudmesh- setting default user
       become_user: "{{ lookup('env','USER') }}"
       shell: cm default user=<chameleon/jestream user>

     - name: running cm info
       become_user: "{{ lookup('env','USER') }}"
       shell: cm info

     - name: adding ssh key
       become_user: "{{ lookup('env','USER') }}"
       shell: cm key add --ssh

     - name: refresh
       become_user: "{{ lookup('env','USER') }}" 
       shell: |
         cm refresh on

     - name:  uploading ssh key to cloud
       become_user: "{{ lookup('env','USER') }}"
       shell: |
         cm key upload

     - name: upload security group
       become_user: "{{ lookup('env','USER') }}"
       shell: |
         cm secgroup upload

     - name: security group list
       become_user: "{{ lookup('env','USER') }}"
       shell: |
         cm secgroup list

     - name : listing the vms
       become_user: "{{ lookup('env','USER') }}"
       shell: cm vm list

     - name: define the a normal cluster
       become_user: "{{ lookup('env','USER') }}"
       shell: cm cluster define --count 3 --image CC-Ubuntu14.04

     - name: define hadoop cluster with addons as spark and pig
       become_user: "{{ lookup('env','USER') }}"
       shell: cm hadoop define spark pig

     - name: show details of cluster addons
       become_user: "{{ lookup('env','USER') }}"
       shell: cm hadoop addons

     - name: show details of cluster, shows the number of stacks
       become_user: "{{ lookup('env','USER') }}"
       shell: cm hadoop avail

     - name: sync
       become_user: "{{ lookup('env','USER') }}"
       shell: cm hadoop sync

     - name: deploy
       become_user: "{{ lookup('env','USER') }}"
       shell: cm hadoop deploy
     - name : verify ssh connection between nodes
       become_user: "{{ lookup('env','USER') }}"
       shell: cm cluster cross_ssh
     
